To view all configuration settings and their sources/origins:
 git config --list --show-origin
 
Configure your identity in Git:
git config --global user.name "Your Name"
git config --global user.email "your.email@example.com"

Configure Your Default Text Editor
git config --global core.editor "emacs"

On Windows systems, setting up a different text editor requires specifying the full path to its executable file. For example, if you want to use Notepad++, you might use a command like this:
git config --global core.editor "'C:/Program Files/Notepad++/notepad++.exe' -multiInst -notabbar -nosession -noPlugin"
How to Change default branch name in Git (optional):
git config --global init.defaultBranch main

 Check Configuration/settings in Git:

 git config --list
 git config user.name  # To check a specific setting (e.g., user name):
 Get Help in Git

 git help <verb>

 Git Help Command: $ git help <verb>

 Using the --help Option: $ git <verb> --help
 Manual pages (manpages): $ man git-<verb>

 Replace the <verb> with whatever command you need help with. For example, to get help for the config command, you can type:
 git help config
or
man git-config

If you need quick, concise information about the available options for a Git command, you can use the -h option:

git add -h    # This will display options available for the add command


To see unstaged changes:

git diff

And to see staged changes:

git diff --cached README.md

If you need to remove a file from Git's tracking, you can use git rm. It remove the file from both the repository and working directory. Suppose you want to remove a file named temp.txt:

git rm temp.txt

If you only want to remove it from the repository but keep it in the working directory, use the --cached option:
 git rm --cached temp.txt


 How to Move (or Rename) Files in Git:

 git mv old_file.txt new_file.txt


 To view the difference introduced in each commit, you can use the -p or --patch option:

  git log -p -2    # -2 is used to view the differences introduced in each of the last two commits


  How to Display Statistics in Git:
The --stat option provides summarized statistics for each commit, including the modified files, lines added/deleted, and a summary
 git log --stat

 How to Customize Git Log Output Format:
The --pretty option allows you to alter the log output format. Various options are available for different formats:

oneline: Concise, single-line summary of each commit.
short: Default format with author, date, and message.
full: Detailed format with commit hash, author, date, message, and diff.
fuller: More detailed format, including full file paths.
format: Customize the output using format specifiers.

git log --pretty=oneline

Useful format specifiers for --pretty=format:

%h: Abbreviated commit hash
%an: Author name
%ae: Author email
%ad: Author date
%s: Subject (commit message)

git log --pretty=format:"%h %an %ad %s"

ASCII Graph:

Using --graph, you can also visualize branch and merge history.

git log --pretty=format:"%h %s" --graph

How to Limit Git Log Output:
In addition to formatting options, git log offers various limiting options to refine the displayed commit history.

-<n>: Shows only the last n commits.
--since, --until: Limits commits to those made after/before the specified date.
--author: Shows commits only by a specific author.
--grep: Filters commits by a keyword in the commit messages.
-S: Shows commits changing
Example Usage: View the last 3 commits by author Abbey since a certain date, with patch details:

$ git log --author="Abbey" --since="2024-01-01" -p -3
How to Undo a Commit in Git
If you've committed too early or need to make additional changes to the last commit, use this command:
git commit --amend

How to Unstage a Staged File with git reset
To unstage a file that was accidentally included, you can use the git reset HEAD <file> command. For example:



git reset HEAD CONTRIBUTING.md




How to Unmodify a Modified File with git checkout
Suppose you made some modifications to files that you later realize you don't want to keep. Use git checkout -- <file> to discard the changes made to a file and revert it back to its previous state.


git checkout -- CONTRIBUTING.md


How to unstage a staged file with git restore
If you accidentally stage a file that you didn't intend to commit, you can use git restore --staged <file> to unstage it.


 git restore --staged CONTRIBUTING.md


 How to unmodify a modified file with git restore
To discard changes made to a file in the working directory, use git restore <file>:


git restore CONTRIBUTING.md


Similar to git checkout -- <file>, this command discard the changes made to the specified file, reverting it back to the state it was in at the last commit.

Important Note: Use commands like git reset, git checkout --,git restore cautiously as they can discard local changes permanently. Use these commands when you're certain that the changes are not needed and you don't have any unsaved local changes.

Alternatives: Stashing and branching are alternative methods to temporarily set aside changes without discarding them entirely. These methods are safer if you're unsure about discarding changes.

How to Fetch and Pull from Remotes in Git
To fetch data from a remote repository, we use the git fetch command followed by the remote name:

$ git fetch origin // Here we are not specifying any particular branch.
It downloads any new changes from the origin remote repository to our local repository, allowing us to stay up-to-date with the latest developments.

Alternatively, if we want to fetch and merge changes from a remote branch into our current branch in a single step, we use the git pull command:

$ git pull origin master
Here, we're specifically pulling changes from the master branch of the origin remote repository into our current branch.

How to Inspect a Remote in Git
Lastly, we can inspect a remote repository to gather more information about it using:

git remote show origin
How to Rename Remotes in Git
Now Suppose we want to rename a remote's shortname from example to new-example:

git remote rename example new-example

How to List Existing Tags in Git
Imagine you're working on a project with multiple release versions. To list existing tags:

git tag


Also, you can search for tags matching a specific pattern using the -l or --list option. For Example:

git tag -l "v2.0*"
This command will list tags like v2.0, v2.0-beta, and so on, matching the specified pattern.
Annotated Tags
Annotated tags, on the other hand, contain additional info such as tagger information, date, and a tagging message.

Creating an annotated tag involves using the -a option with the git tag command, along with a tagging message. e.g:

git tag -a v2.0 -m "Release version 2.0"

To view detailed information about this tag, including the commit it points to and the tagging message, use:

git show v2.0

How to tag an older commit in Git
Sometimes, you might forget to tag a specific commit. Not to worry, you can tag it later by specifying the commit checksum

Example: suppose you forgot to tag a commit with ID abcdefg. You can tag it as follows:

git tag -a v1.2 abcdefg

How to Push Tag to a Remote repo in Git
To push a specific tag to a remote server, you can use:

git push origin <tagname>


How to Delete Tags in Git
To delete a tag locally (removing from local repo):

git tag -d <tagname>
For Example, to delete a lightweight tag named v1.4-lw:

git tag -d v1.4-lw

On the other hand, you can delete a tag from a remote server in two ways:

Using the git push command with a refspec:
git push origin :refs/tags/v1.1-lw

Using the --delete option with git push:
git push origin --delete v1.1-lw

How to Check Out Tags in Git
To view the state of files at a specific tag, you can check out that tag:

$ git checkout v2.0
This command puts your repository in a "detached HEAD" state, where you can view files but cannot make changes directly.

If you need to work on files at that tag, it's better to create a new branch:

$ git checkout -b v2.0-branch v2.0
Now you can make changes and commits without altering the original tag.

Git Aliases
Git aliases are shortcuts or custom commands that you can create to simplify and streamline your Git workflow.

To create a Git alias, you use the git config command with the --global flag to make the alias available across all your Git repositories.

Basic Aliases for Common Commands
You can create aliases for frequently used Git commands to make them easier to remember and type. For example:

$ git config --global alias.co checkout
$ git config --global alias.br branch
$ git config --global alias.ci commit

Now, instead of typing out the full commands, you can use shorter aliases like git co, git br, and git ci respectively.

You can also create custom aliases for actions you frequently perform or for improving command readability. Example:

$ git config --global alias.unstage 'reset HEAD --'
Now, you can use git unstage <file> instead of git reset HEAD -- <file> to unstage a file.

How to Combine Multiple Commands in Git
Aliases can also be used to combine multiple Git commands into a single alias. For example, let's create an alias to stage all changes and then commit them with a single command:

$ git config --global alias.commitall '!git add -A && git commit'
Now, running git commitall will stage all changes (git add -A) and then commit them, saving you time and keystrokes.


How to Visualize Branches in Git:
After creating and switching branches, you can visualize the branch structure using:

$ git log --oneline --decorate --graph --all
This command displays a concise and graphical representation of the commit history and branch pointers, allowing you to see how branches diverge and merge over time.

How to Manage Branches in Git
How to Manage Merged Branches
As your project evolves, you'll merge branches back into the main branch once their changes are finalized. To identify merged branches, execute:

$ git branch --merged
This command lists branches that have been successfully merged into the current branch. These branches are generally safe to delete using:

$ git branch -d branch_name
However, for branches containing unmerged work, use:

$ git branch --no-merged
Deleting such branches requires the '-D' flag:

$ git branch -D branch_name
This ensures that you don't inadvertently lose any unmerged changes.

How to Rename Branches
To rename a local branch:

$ git branch --move old_branch_name new_branch_name
This command updates the branch name locally. To reflect the change on the remote repository, push the renamed branch:

$ git push --set-upstream origin new_branch_name
Verify the changes using:

$ git branch --all
Ensure to delete the old branch on the remote:

$ git push origin --delete old_branch_name
This ensures uniformity across local and remote repositories.




Make sure you remember to update references and configurations across dependencies, tests, scripts, and repository hosts. Once done, delete the old master branch on the remote:

$ git push origin --delete master

Rebasing in Git
In Git, when you're working with branches, there are two primary ways to integrate changes from one branch into another: merging and rebasing.

Unlike merging, which can create a cluttered history with multiple merge commits, rebasing produces a linear history, making it easier to understand the sequence of changes made over time.

Basic Rebase Example:
Imagine you're working on a project with two branches: "feature" and "master". You've made some commits on the "feature" branch and now want to integrate these changes into the "master" branch using rebasing.

First, you switch to your "feature" branch:

$ git checkout feature
Then, you rebase your feature branch onto the master branch:

$ git rebase master
This command takes all the commits/changes you made on your "feature" branch and applies them on top of the latest commits in the "master" branch, and replays the commits one by one.

Not only master branch, you can also rebase a topic branch onto another topic branch. Example:

Suppose you're working on a project with two feature branches: "frontend" and "backend". You made some commits on the "frontend" branch and now want to integrate these changes into the "backend" branch.

Let's use a different approach this time -
use --onto option of git rebase to rebase the "frontend" branch onto the "backend" branch:

$ git rebase --onto backend frontend
After rebasing, switch back to the "backend" branch and perform a fast-forward merge:

$ git checkout backend
$ git merge frontend
Now, your project history appears linear, reflecting the sequential integration of changes from the "frontend" branch into the "backend" branch.

Rebasing vs Merging: Which is Better?
Rebasing Use Cases:
Suitable for feature branches that need a clean integration into the mainline branch.
Preferred for open-source contributions where a clean commit history is valued.
Merging Use Cases:
Appropriate for collaborative environments where transparency in the project's development process is crucial.
Useful for projects where maintaining an accurate historical record is a priority.
Conclusion
This handbook serves as a comprehensive guide to understanding and utilizing Git, a powerful version control system widely used in software development.

From basic workflows to setting up a repository, tagging, and branching remote repositories, we have learnt a comprehensive suite of features that will help streamlining the development process.

